import requests
import vertica_python
import time
from pyredis import Client

from Server.util import strtodate_yyyymmddhhmmss, to_date_path

v_conn_info = {"host": "192.168.100.10",
               "port": 5433,
               "user": "dbadmin",
               "password": "achi0012",
               "database": "bp",
               # autogenerated session label by default,
               "session_label": "lpr",
               # default throw error on invalid UTF-8 results
               "unicode_error": "replace",
               # SSL is disabled by default
               "ssl": False,
               # autocommit is off by default
               "autocommit": True,
               # using server-side prepared statements is disabled by default
               "use_prepared_statements": True,
               # connection timeout is not enabled by default
               # 5 seconds timeout for a socket operation (Establishing a TCP connection or read/write operation)
               "connection_timeout": 5}

local_redis_service = {"host": "192.168.100.20", "port": 6379}


class tcpd_carcheck:

    def __init__(self, csv: str) -> None:
        ss = csv.split(",")
        self.check_carlicense = ss[1]
        self.video_name = ss[0]
        self.carcheck_time = strtodate_yyyymmddhhmmss(ss[2])
        path = to_date_path(self.carcheck_time)
        if int(ss[3]) in [1, 2]:
            self.screenshots_path = path+ss[0]+ss[1]+ss[2]+"-1"
            self.panoramic_path = path + ss[0]+ss[1]+ss[2]+"-2"
            self.recognition_type = 0
        else:
            self.screenshots_path = path+ss[0]+ss[1]+ss[2]+"-3"
            self.panoramic_path = path + ss[0]+ss[1]+ss[2]+"-4"
            self.recognition_type = 1

    def to_csv(self):
        return self.check_carlicense+"|"+self.video_name+"|"+str(self.carcheck_time)+"|"+self.screenshots_path+"|"+self.panoramic_path+"|"+str(self.recognition_type)+"\n"


def init_check_cars():
    check_tcpd_involved = []
    check_tcpd_stolen = []
    with vertica_python.connect(**v_conn_info) as conn:
        with conn.cursor(dict) as cur:
            cur.execute("""
                select check_carlicense, xtype from
                (select check_carlicense, '1' xtype from public.tcpd_involved
                union all
                select check_carlicense, '2' xtype from public.tcpd_stolen) xxx
                group by check_carlicense, xtype order by check_carlicense, xtype
            """)
            rows = cur.fetchall()
            for row in rows:
                if row["xtype"] == "1":
                    check_tcpd_involved.append(row["check_carlicense"])
                if row["xtype"] == "2":
                    check_tcpd_stolen.append(row["check_carlicense"])
    return check_tcpd_involved, check_tcpd_stolen


def call_cms(carLicanse, videoName, involvedCheck, stolenCheck):
    try:
        datas = "pushTotal"+len(carLicanse)
        datas = datas+"&carLicanse="+",".join(carLicanse)
        datas = datas+"&videoName="+",".join(videoName)
        datas = datas+"&involvedCheck="+",".join(involvedCheck)
        datas = datas+"&stolenCheck="+",".join(stolenCheck)
        resp = requests.post(
            "http://10.66.32.31:8082/pushAlert", data=datas.encode("utf-8"))
        if resp.status_code == 200:
            print("Call CMS OK")
    except Exception as err:
        print(err)


if __name__ == "__main__":
    while True:
        try:
            time.sleep(1)
            check_tcpd_involved,  check_tcpd_stolen = init_check_cars()
            redis_client = Client(
                host=local_redis_service["host"], port=local_redis_service["port"], encoding="UTF-8")
            results = []
            redis_keys = []
            carLicanse = []
            videoName = []
            involvedCheck = []
            stolenCheck = []
            for k in redis_client.keys("*"):
                redis_keys.append(k)
                o = tcpd_carcheck(redis_client.get(k))
                results.append(o)
                # check cars
                if o.check_carlicense in check_tcpd_involved:
                    carLicanse.append(o.check_carlicense)
                    videoName.append(o.video_name)
                    involvedCheck.append(o.check_carlicense)
                if o.check_carlicense in check_tcpd_stolen:
                    carLicanse.append(o.check_carlicense)
                    videoName.append(o.video_name)
                    stolenCheck.append(o.check_carlicense)
                if len(carLicanse) > 0:
                    print("Call CMS")
                    # call_cms(carLicanse, videoName, involvedCheck, stolenCheck)
            # insert data into Vertica
            with vertica_python.connect(**v_conn_info) as conn:
                with conn.cursor(dict) as cur:
                    cur.copy("""
                        Copy public.tcpd_carcheck (check_carlicense, video_name, carcheck_time, screenshots_path,
                        panoramic_path, recognition_type) from STDIN DELIMITER '|' NO COMMIT  
                    """, "".join(x.to_csv() for x in results))
                    cur.execute("COMMIT")
            # delete redis
            for redis_key in redis_keys:
                redis_client.delete(redis_key)
        except Exception as err:
            print(err)
